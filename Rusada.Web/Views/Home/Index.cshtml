@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <div id="plane-list">
        <div class="row">
            <div class="col">
                <button type="button" class="btn btn-outline-primary float-start" data-bind="click: showCreateClicked">Add New</button>
            </div>
            <div class="d-flex input-group mb-3 col">
                <input class="form-control" type="search" placeholder="Search" aria-label="Search" aria-describedby="button-addon2" data-bind="value: searchText">
                <button class="btn btn-outline-secondary" type="button" id="button-addon2" data-bind="click: searchClicked">Search</button>
            </div>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Make</th>
                    <th scope="col">Model</th>
                    <th scope="col">Registration</th>
                    <th scope="col">Location</th>
                    <th scope="col">Seen At</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: planeList">
                <tr data-bind="click: $parent.detailClicked">
                    <td class="click-able">
                        <img src="../../content/images/default.png" class="img-thumbnail" alt="flight image">
                    </td>
                    <td class="click-able" data-bind="text: make"></td>
                    <td class="click-able" data-bind="text: model"></td>
                    <td class="click-able" data-bind="text: registration"></td>
                    <td class="click-able" data-bind="text: location"></td>
                    <td class="click-able" data-bind="text: seenDateTime"></td>
                    <td>
                        <button type="button" class="btn btn-outline-primary" data-bs-target="#updateModal">Update</button>
                        <button type="button" class="btn btn-outline-danger" data-bind="click: $parent.deleteClicked">Delete</button>
                    </td>
                </tr>

            </tbody>
        </table>

        <!-- Delete confirm model -->
        <div id="deleteConfirmModal" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Are you sure?</h5>
                        <button type="button" class="btn-close" aria-label="Close" data-bind="click: deleteCancelClicked"></button>
                    </div>
                    <div class="modal-body">
                        <p>Do you really want to delete these record? This process cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bind="click: deleteCancelClicked">Cancel</button>
                        <button type="button" class="btn btn-danger" data-bind="click: deleteDeleteClicked">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- End of Delete confirm model -->

    </div>

</div>

<partial name="CreateSighting.cshtml" />
<partial name="EditSighting.cshtml" />


<script>

    function PlaneListModel() {
        var self = this;
        self.planeList = ko.observableArray([]);

        self.sendListRequest = function (searchText) {
            let url = "/api/planesightings";
            if (searchText != null && searchText.trim().length > 0) {
                url = url + "?searchText=" + searchText;
            }
            let jqxhr = $.getJSON(url, function () {
                console.log("success");
            })
                .done(function (response) {
                    getListRequestSuccess(response);
                })
                .fail(function (error) {
                    console.log("error");
                    console.log(error);
                });
        }

        function getListRequestSuccess(response) {
            const list = response.data;
            self.planeList.removeAll();
            list.forEach(function (item, index) {
                self.planeList.push(item);
            });
        }

        self.sendDeleteItemRequest = function (itemId) {
            const url = "/api/planesightings/" + itemId;
            var request = $.ajax({
                url: url,
                method: "DELETE"
            });
            request.done(function (msg) {
                console.log("delete item success");
                itemDeleteSuccess();
            });
            request.fail(function (jqXHR, textStatus) {
                console.log("delete item fail called");
            });
        }

        function itemDeleteSuccess() {
            self.sendListRequest();
        }
    }

    function PlaneListViewModel(planeListModel) {
        var self = this;
        self.planeList = planeListModel.planeList;
        self.currentModelView = null;
        self.searchText = ko.observableArray("");
        self.itemToBeDeletedId = 0;
        

        ko.postbox.subscribe("newSightingAddedTopic", function (newValue) {
            planeListModel.sendListRequest();
            self.currentModelView.hide();
        });

        self.showCreateClicked = function () {
            self.currentModelView = new bootstrap.Modal(document.getElementById('createModal'), {});
            self.currentModelView.show();
        }

        self.deleteClicked = function (planeSighting) {
            self.itemToBeDeletedId = planeSighting.id;
            self.currentModelView = new bootstrap.Modal(document.getElementById('deleteConfirmModal'), {});
            self.currentModelView.show();
        }

        self.deleteDeleteClicked = function (planeSighting) {
            self.currentModelView.hide();
            planeListModel.sendDeleteItemRequest(self.itemToBeDeletedId);
        }

        self.deleteCancelClicked = function (planeSighting) {
            self.itemToBeDeletedId = 0;
            self.currentModelView.hide();
        }

        self.detailClicked = function (planeSighting, event) {
            console.log(planeSighting);
            //console.log(event);
            event.preventDefault();
        }

        self.searchClicked = function () {
            //TODO sinitize the search text
            //TODO back to all results
            planeListModel.sendListRequest(self.searchText());
        }

        planeListModel.sendListRequest();
    }

    ko.applyBindings(
        new PlaneListViewModel(new PlaneListModel()),
        document.getElementById("plane-list"));


    //Create a Sighting
    function SightingCreateModel() {
        var self = this;

        self.sendCreateSighting = function (planeSighting) {
            console.log("create called");
            console.log(planeSighting);
            const jsonData = JSON.stringify(planeSighting);

            var request = $.ajax({
                url: "/api/planesightings",
                method: "POST",
                data: jsonData,
                contentType: "application/json"
            });
            request.done(function (msg) {
                console.log("done called");
                onNewRecordAdded();
            });
            request.fail(function (jqXHR, textStatus) {

                console.log("fail called");
                console.log(textStatus);
                console.log(jqXHR);
            });
        }

        function onNewRecordAdded() {
            ko.postbox.publish("newSightingAddedTopic", true);
        }
    }

    function SightingCreateViewModel(sightingCreateModel) {
        var self = this;

        self.model = sightingCreateModel;

        self.make = ko.observable("");
        self.model = ko.observable("");
        self.registration = ko.observable("");
        self.location = ko.observable("");
        self.seenDateTime = ko.observable("2023-04-12T16:05:07");

        ko.postbox.subscribe("newSightingAddedTopic", function (newValue) {
            self.make("");
            self.model("");
            self.registration("");
            self.location("");
            self.seenDateTime("");
        });

        self.addClicked = function () {
            validateNewSighting();
            const createObj = {
                make: self.make(),
                model: self.model(),
                registration: self.registration(),
                location: self.location(),
                seenDateTime: self.seenDateTime(),
            };
            sightingCreateModel.sendCreateSighting(createObj);
        }

        function validateNewSighting() {
            //TODO do validations
            console.log("todo do validations");
        }

        //TODO handle plane picture
        //TODO handle errors
        //TODO remove old values
    }

    ko.applyBindings(
        new SightingCreateViewModel(new SightingCreateModel()),
        document.getElementById("create-plane-sighting"));</script>